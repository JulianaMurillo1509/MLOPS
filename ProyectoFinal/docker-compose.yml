version: '3'

services:
  frontend:
    build: 
      context: .
      dockerfile: simple_UI/Dockerfile
    image: leodocker2021/my-repo-mlops-frontend:latest
    environment:
      HOST: localhost
      #HOST: 192.168.3.6
      #HOST: ${HOST:-$(hostname -I | awk '{print $1}')}
    ports:
      - "8501:8501"
    depends_on:
      - api-train
      - api-inference
      - api-store-info
      # - adminer
    volumes:
        - my-data:/work0

  api-train:
    build:
      context: .
      dockerfile: simple_train/Dockerfile
    image: leodocker2021/my-repo-mlops-api-train:latest
    environment:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USER: airflow
      DB_PASSWORD: airflow
    volumes:
      - my-data:/work1
      - my-data-inference:/inference
    ports:
      - "8502:82"
    #depends_on:
    #  - db
  #db:
  #  image: postgres:latest
  #  restart: always
  #  environment:
  #    POSTGRES_USER: myuser
  #    POSTGRES_PASSWORD: mypassword
  #    POSTGRES_DB: mydatabase
  #  ports:
  #    - "5433:5432"

  api-inference:
    build:
      context: .
      dockerfile: simple_inference/Dockerfile
    image: leodocker2021/my-repo-mlops-api-inference:latest
    environment:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USER: airflow
      DB_PASSWORD: airflow
    ports:
      - "8503:83"
    depends_on:
      - api-train
    volumes:
      - my-data:/work2
      - my-data-inference:/inference

  api-store-info:
    build:
      context: .
      dockerfile: simple_store_info/Dockerfile
    image: leodocker2021/my-repo-mlops-api-store-info:latest
    environment:
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: mydatabase
      DB_USER: myuser
      DB_PASSWORD: mypassword
    ports:
      - "8504:84"
    depends_on:
      - api-train
    volumes:
      - my-data:/work2
      - my-data-inference:/inference
  jupyter:
    user: root
    build:
      context: .
      dockerfile: jupyter/Dockerfile
    image: workspace/jupyter
    container_name: jupyter
    restart: on-failure
    ports:
      - "${JUPYTER_PORT}:8888"
    depends_on:
      - api-train

    environment:
      #MLFLOW_TRACKING_URI: "http://mlflow:5000"
      JUPYTER_ENABLE_LAB: ${JUPYTER_ENABLE_LAB}
      #SFTP_HOST: ${SFTP_HOST}
      JUPYTER_USERNAME: ${JUPYTER_USERNAME}
      JUPYTER_TOKEN: ${JUPYTER_TOKEN}
    volumes:
      - ./notebooks/:/home/${JUPYTER_USERNAME}/work
      #- ./keys/ssh_host_rsa_key:/home/${JUPYTER_USERNAME}/.ssh/ssh_host_rsa_key:ro
      #- ./keys/ssh_host_ed25519_key:/home/${JUPYTER_USERNAME}/.ssh/ssh_host_ed25519_key:ro
      #- ./keys/config:/home/${JUPYTER_USERNAME}/.ssh/config:ro
  #adminer:
  #  image: adminer
  #  restart: always
  #  ports:
  #    - 8090:8080
  #  environment:
  #    ADMINER_DEFAULT_DRIVER: postgres
  #    POSTGRES_USER: myuser
  #    POSTGRES_PASSWORD: mypassword
  #    POSTGRES_DB: mydatabase
  #  depends_on:
  #    - db


volumes:
  my-data:
  my-data-inference:
